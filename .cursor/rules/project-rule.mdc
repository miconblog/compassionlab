# ü§ñ AI Project Rules

This document outlines development rules and guidelines commonly used in AI projects.

## üìã Table of Contents

1. [Technology Stack](#technology-stack)
2. [Code Style](#code-style)
3. [Naming Conventions](#naming-conventions)
4. [Component Structure](#component-structure)
5. [State Management](#state-management)
6. [API Design](#api-design)
7. [Error Handling](#error-handling)
8. [Performance Optimization](#performance-optimization)
9. [Security](#security)
10. [Testing](#testing)
11. [Documentation](#documentation)

## üõ†Ô∏è Technology Stack

### Framework & Runtime

- **Next.js 15.3.4** - React-based full-stack framework (App Router)
- **React 19.0.0** - User interface library
- **TypeScript 5** - Static type checking

### Styling

- **Tailwind CSS 4** - Utility-first CSS framework
- **class-variance-authority** - Component variant management
- **clsx** - Conditional class name utility
- **tailwind-merge** - Tailwind class merging

### UI Components

- **shadcn/ui** - Reusable UI component library
- **Radix UI** - Accessibility-focused headless UI components
  - `@radix-ui/react-label`
  - `@radix-ui/react-select`
  - `@radix-ui/react-slot`
- **Lucide React** - Icon library

### Form Management & Validation

- **React Hook Form 7.62.0** - High-performance form library
- **@hookform/resolvers** - React Hook Form resolvers
- **Zod 4.0.17** - TypeScript-first schema validation

### Backend & Database

- **Supabase** - Open-source Firebase alternative
  - `@supabase/supabase-js` - Supabase client

### Development Tools

- **ESLint 9** - Code quality checking
- **Prettier 3.6.0** - Code formatter
- **eslint-config-prettier** - ESLint-Prettier integration
- **eslint-plugin-import** - Import/export rules
- **eslint-plugin-prettier** - Prettier ESLint rules
- **eslint-plugin-unused-imports** - Remove unused imports

### Animation

- **tw-animate-css** - Tailwind CSS animations

### Project Structure

```
compassionlab/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app/                    # Next.js App Router
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ about/             # About page
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ programs/          # Programs page
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ philosophy/        # Education philosophy page
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ contact/           # Contact page
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ globals.css        # Global styles
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx         # Root layout
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx           # Main page
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/                # shadcn/ui components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ button.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ card.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ input.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ textarea.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ select.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ label.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ form.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Navigation.tsx     # Navigation component
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Section.tsx        # Section component
‚îÇ   ‚îî‚îÄ‚îÄ lib/
‚îÇ       ‚îú‚îÄ‚îÄ supabase.ts        # Supabase client
‚îÇ       ‚îú‚îÄ‚îÄ utils.ts           # Utility functions
‚îÇ       ‚îú‚îÄ‚îÄ colors.ts          # Brand colors
‚îÇ       ‚îî‚îÄ‚îÄ typography.ts      # Typography
‚îú‚îÄ‚îÄ public/                    # Static files
‚îú‚îÄ‚îÄ docs/                      # Project documentation
‚îî‚îÄ‚îÄ supabase/
    ‚îî‚îÄ‚îÄ schema/                # Database schema
        ‚îî‚îÄ‚îÄ public.schema.sql  # public schema

```

### Environment Variables

```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

# Email service (optional)
SENDGRID_API_KEY=your_sendgrid_api_key
RESEND_API_KEY=your_resend_api_key
```

### shadcn/ui Usage Rules

#### Adding Components

```bash
# Add new components
npx shadcn@latest add button
npx shadcn@latest add card
npx shadcn@latest add input
npx shadcn@latest add textarea
npx shadcn@latest add select
npx shadcn@latest add label
npx shadcn@latest add form
```

#### Component Usage

```typescript
// ‚úÖ Good example - shadcn/ui component usage (client component)
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';

export const UserCard = () => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>User Information</CardTitle>
      </CardHeader>
      <CardContent>
        <Input placeholder="Enter your name" />
        <Button>Save</Button>
      </CardContent>
    </Card>
  );
};

// ‚úÖ Good example - shadcn/ui usage in server component
// app/users/page.tsx
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export default function UsersPage() {
  return (
    <div className="container mx-auto py-8">
      <Card>
        <CardHeader>
          <CardTitle>User List</CardTitle>
        </CardHeader>
        <CardContent>
          <p>User information...</p>
          <Button>Add New User</Button>
        </CardContent>
      </Card>
    </div>
  );
}

// ‚ùå Bad example - using variant prop (shadcn/ui Card doesn't support variant)
<Card variant="elevated">  // Don't do this
  <div>Content</div>
</Card>
```

#### Form Component Usage

```typescript
// React Hook Form + Zod + shadcn/ui integration
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

const formSchema = z.object({
  name: z.string().min(1, 'Please enter your name'),
  email: z.string().email('Invalid email format'),
});

export const UserForm = () => {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: '',
    },
  });

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    console.log(values);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```

### Supabase Usage Rules

#### Client Setup

```typescript
// lib/supabase.ts
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

#### Database Function Writing

```typescript
// lib/api/forms.ts
import { supabase } from '@/lib/supabase';

export type ApplicationFormData = {
  name: string;
  email: string;
  phone: string;
  age: number;
  program: string;
  message?: string;
  preferred_contact: 'email' | 'phone';
  agree_to_terms: boolean;
};

export const saveApplicationForm = async (data: ApplicationFormData) => {
  const { data: result, error } = await supabase
    .from('applications')
    .insert([data])
    .select();

  if (error) {
    throw new Error(`Error saving application: ${error.message}`);
  }

  return result;
};
```

### Tailwind CSS Usage Rules

#### Brand Color Usage

```typescript
// lib/colors.ts
export const colors = {
  primary: {
    50: '#eff6ff',
    500: '#3b82f6',
    600: '#2563eb',
    700: '#1d4ed8',
  },
  secondary: {
    50: '#f8fafc',
    500: '#64748b',
    600: '#475569',
    700: '#334155',
  },
};

// Usage example
<div className="bg-primary-600 text-white">
  Using brand colors
</div>
```

#### Responsive Design

```typescript
// ‚úÖ Good example
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  <Card className="p-4 md:p-6">
    <h3 className="text-lg md:text-xl font-semibold">Title</h3>
    <p className="text-sm md:text-base">Content</p>
  </Card>
</div>

// ‚ùå Bad example - using fixed sizes
<div className="grid grid-cols-3 gap-4">
  <Card className="p-6">
    <h3 className="text-xl font-semibold">Title</h3>
    <p className="text-base">Content</p>
  </Card>
</div>
```

## üé® Code Style

### TypeScript Rules

#### Type Declaration Rules

```typescript
// ‚úÖ Good example - using type (general type definitions)
type User = {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
};

type UserStatus = 'active' | 'inactive' | 'pending';

type ButtonProps = {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onClick?: () => void;
};

type ApiResponse<T> = {
  data: T;
  error: string | null;
  success: boolean;
};

// ‚úÖ Good example - using interface (OOP concept interfaces)
interface UserService {
  getUserById(id: string): Promise<User | null>;
  createUser(user: Omit<User, 'id' | 'createdAt'>): Promise<User>;
  updateUser(id: string, user: Partial<User>): Promise<User>;
  deleteUser(id: string): Promise<void>;
}

interface DatabaseConnection {
  connect(): Promise<void>;
  disconnect(): Promise<void>;
  query<T>(sql: string, params?: any[]): Promise<T[]>;
}

interface EventHandler {
  handle(event: Event): void;
  canHandle(event: Event): boolean;
}

// ‚ùå Bad example - using interface for general type definitions
interface User {
  id: string;
  name: string;
  email: string;
}

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
}

// ‚ùå Bad example - incorrect naming
type user = {
  ID: string;
  Name: string;
  Email: string;
  created_at: Date;
};

const getUserById = async (id: string): Promise<User | null> => {
  // implementation
};
```

### React Component Rules

#### Client Components (Named Arrow Functions)

```typescript
// ‚úÖ Good example - client component (internal use)
'use client';

type Props = {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onClick?: () => void;
};

export const Button = ({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  onClick,
}: Props) => {
  return (
    <button
      className={`btn btn-${variant} btn-${size}`}
      disabled={disabled}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

// ‚úÖ Good example - stateful client component (internal use)
'use client';

type Props = {
  initialValue?: number;
};

export const Counter = ({ initialValue = 0 }: Props) => {
  const [count, setCount] = useState(initialValue);

  const increment = () => setCount(prev => prev + 1);
  const decrement = () => setCount(prev => prev - 1);

  return (
    <div className="flex items-center gap-4">
      <button onClick={decrement}>-</button>
      <span>{count}</span>
      <button onClick={increment}>+</button>
    </div>
  );
};

// ‚úÖ Good example - when Props export is needed
'use client';

export type ButtonProps = {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onClick?: () => void;
};

export const Button = ({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  onClick,
}: ButtonProps) => {
  return (
    <button
      className={`btn btn-${variant} btn-${size}`}
      disabled={disabled}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

// ‚ùå Bad example - using function declaration
export function Button(props: any) {
  return <button {...props} />;
}

// ‚ùå Bad example - using anonymous function
export const Button = (props: any) => {
  return <button {...props} />;
};
```

#### Server Components (page.tsx files only)

```typescript
// ‚úÖ Good example - server component (page.tsx)
// app/about/page.tsx
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export default function AboutPage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">About Us</h1>
      <Card>
        <CardHeader>
          <CardTitle>Company Introduction</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Company description...</p>
          <Button>Learn More</Button>
        </CardContent>
      </Card>
    </div>
  );
}

// ‚úÖ Good example - data fetching in server component
// app/programs/page.tsx
import { getPrograms } from '@/lib/api/programs';

export default async function ProgramsPage() {
  const programs = await getPrograms();

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Programs</h1>
      <div className="grid gap-4">
        {programs.map(program => (
          <div key={program.id}>
            <h2>{program.title}</h2>
            <p>{program.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

// ‚ùå Bad example - using client features in server component
export default function Page() {
  const [state, setState] = useState(); // ‚ùå useState only available in client
  const handleClick = () => {}; // ‚ùå Event handlers only available in client

  return <div>...</div>;
}
```

## üè∑Ô∏è Naming Conventions

### Files and Folders

```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/                    # Basic UI components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.test.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Input/
‚îÇ   ‚îú‚îÄ‚îÄ features/              # Feature-specific components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dashboard/
‚îÇ   ‚îî‚îÄ‚îÄ layouts/               # Layout components
‚îú‚îÄ‚îÄ hooks/                     # Custom hooks
‚îú‚îÄ‚îÄ lib/                       # Utility functions
‚îú‚îÄ‚îÄ types/                     # Type definitions
‚îî‚îÄ‚îÄ constants/                 # Constants
```

### Variables and Functions

```typescript
// ‚úÖ Good example
const userList = [];
const isLoading = true;
const handleSubmit = () => {};
const fetchUserData = async () => {};

// ‚ùå Bad example
const user_list = [];
const loading = true;
const submit = () => {};
const getData = async () => {};
```

## üß© Component Structure

### Component File Structure

#### Client Component Structure

```typescript
// components/ui/Button.tsx
'use client';

import { cn } from '@/lib/utils';

type Props = {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onClick?: () => void;
};

export const Button = ({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  onClick,
  className,
  ...props
}: Props & React.ButtonHTMLAttributes<HTMLButtonElement>) => {
  return (
    <button
      className={cn(
        'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',
        'disabled:pointer-events-none disabled:opacity-50',
        {
          'bg-primary text-primary-foreground hover:bg-primary/90': variant === 'primary',
          'bg-secondary text-secondary-foreground hover:bg-secondary/80': variant === 'secondary',
          'bg-destructive text-destructive-foreground hover:bg-destructive/90': variant === 'danger',
        },
        {
          'h-9 px-3': size === 'sm',
          'h-10 px-4 py-2': size === 'md',
          'h-11 px-8': size === 'lg',
        },
        className
      )}
      disabled={disabled}
      onClick={onClick}
      {...props}
    >
      {children}
    </button>
  );
};
```

#### Server Component Structure (page.tsx)

```typescript
// app/about/page.tsx
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';

export default function AboutPage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">About Us</h1>
      <Card>
        <CardHeader>
          <CardTitle>Company Introduction</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Company description...</p>
          <Button>Learn More</Button>
        </CardContent>
      </Card>
    </div>
  );
}
```

#### Component Separation Principles

1. **Client/Server Separation**:
   - Client components: Use `'use client'` directive, need state or event handlers
   - Server components: Only page.tsx files, for data fetching or static rendering

2. **Single Responsibility Principle**: Each component should have only one responsibility

3. **Reusability**: Design to be reusable whenever possible

4. **Composition**: Prefer composition over inheritance

5. **Immutability**: Props should be immutable

## üîÑ State Management

### Local State

```typescript
// ‚úÖ Good example
const [isLoading, setIsLoading] = useState(false);
const [error, setError] = useState<string | null>(null);
const [data, setData] = useState<User[]>([]);

// ‚ùå Bad example
const [state, setState] = useState({
  isLoading: false,
  error: null,
  data: [],
});
```

### Global State (Zustand Example)

```typescript
// stores/userStore.ts
import { create } from 'zustand';

type User = {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
  updatedAt: Date;
};

type UserState = {
  user: User | null;
  isLoading: boolean;
  error: string | null;
  setUser: (user: User | null) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
};

export const useUserStore = create<UserState>(set => ({
  user: null,
  isLoading: false,
  error: null,
  setUser: user => set({ user }),
  setLoading: isLoading => set({ isLoading }),
  setError: error => set({ error }),
}));
```

## üåê API Design

### API Function Structure

```typescript
// lib/api/users.ts
import { supabase } from '@/lib/supabase';

export type CreateUserData = {
  name: string;
  email: string;
  password: string;
};

export type UpdateUserData = {
  name?: string;
  email?: string;
};

export type User = {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
  updatedAt: Date;
};

export const userApi = {
  // Get user list
  getUsers: async (): Promise<User[]> => {
    const { data, error } = await supabase.from('users').select('*');

    if (error) throw new Error(error.message);
    return data;
  },

  // Create user
  createUser: async (userData: CreateUserData): Promise<User> => {
    const { data, error } = await supabase
      .from('users')
      .insert(userData)
      .select()
      .single();

    if (error) throw new Error(error.message);
    return data;
  },

  // Update user
  updateUser: async (id: string, userData: UpdateUserData): Promise<User> => {
    const { data, error } = await supabase
      .from('users')
      .update(userData)
      .eq('id', id)
      .select()
      .single();

    if (error) throw new Error(error.message);
    return data;
  },

  // Delete user
  deleteUser: async (id: string): Promise<void> => {
    const { error } = await supabase.from('users').delete().eq('id', id);

    if (error) throw new Error(error.message);
  },
};
```

### Custom Hooks

```typescript
// hooks/useUsers.ts
import { useState, useEffect } from 'react';
import { userApi } from '@/lib/api/users';

type User = {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
  updatedAt: Date;
};

type UseUsersReturn = {
  users: User[];
  isLoading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
};

export const useUsers = (): UseUsersReturn => {
  const [users, setUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchUsers = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await userApi.getUsers();
      setUsers(data);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : 'An unknown error occurred.'
      );
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  return {
    users,
    isLoading,
    error,
    refetch: fetchUsers,
  };
};
```

## ‚ö†Ô∏è Error Handling

### Error Boundary

```typescript
// components/ErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';

type Props = {
  children: ReactNode;
  fallback?: ReactNode;
};

type State = {
  hasError: boolean;
  error?: Error;
};

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="error-boundary">
          <h2>Something went wrong.</h2>
          <p>Please refresh the page.</p>
        </div>
      );
    }

    return this.props.children;
  }
}
```

### API Error Handling

```typescript
// lib/errorHandler.ts
export class ApiError extends Error {
  constructor(
    message: string,
    public statusCode: number,
    public code?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

type ErrorHandler = (error: unknown) => string;

export const handleApiError: ErrorHandler = error => {
  if (error instanceof ApiError) {
    return error.message;
  }

  if (error instanceof Error) {
    return error.message;
  }

  return 'An unknown error occurred.';
};
```

## ‚ö° Performance Optimization

### React.memo Usage

```typescript
// ‚úÖ Good example
type Props = {
  user: User;
  onEdit: (id: string) => void;
};

export const UserCard = React.memo<Props>(({ user, onEdit }) => {
  return (
    <div className="user-card">
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      <button onClick={() => onEdit(user.id)}>Edit</button>
    </div>
  );
});

UserCard.displayName = 'UserCard';
```

### useMemo and useCallback

```typescript
// ‚úÖ Good example
type Props = {
  users: User[];
  onUserSelect: (userId: string) => void;
};

const UserList = ({ users, onUserSelect }: Props) => {
  const sortedUsers = useMemo(() => {
    return users.sort((a, b) => a.name.localeCompare(b.name));
  }, [users]);

  const handleUserSelect = useCallback((userId: string) => {
    onUserSelect(userId);
  }, [onUserSelect]);

  return (
    <div>
      {sortedUsers.map(user => (
        <UserCard
          key={user.id}
          user={user}
          onSelect={handleUserSelect}
        />
      ))}
    </div>
  );
};
```

### Image Optimization

```typescript
// ‚úÖ Good example
import Image from 'next/image';

type Props = {
  src: string;
  alt: string;
  size?: number;
};

export const Avatar = ({ src, alt, size = 40 }: Props) => {
  return (
    <Image
      src={src}
      alt={alt}
      width={size}
      height={size}
      className="rounded-full"
      priority={false}
    />
  );
};
```

## üîí Security

### Input Validation

```typescript
// lib/validation.ts
import { z } from 'zod';

export const userSchema = z.object({
  name: z
    .string()
    .min(1, 'Please enter your name.')
    .max(50, 'Name must be 50 characters or less.'),
  email: z.string().email('Invalid email format.'),
  password: z.string().min(8, 'Password must be at least 8 characters.'),
});

export type UserFormData = z.infer<typeof userSchema>;

// Usage example
const validateUserData = (data: unknown): UserFormData => {
  return userSchema.parse(data);
};
```

### XSS Prevention

```typescript
// ‚úÖ Good example
type Props = {
  user: User;
};

const UserProfile = ({ user }: Props) => {
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.bio}</p>
    </div>
  );
};

// ‚ùå Bad example
const UserProfile = ({ user }: Props) => {
  return (
    <div>
      <h1 dangerouslySetInnerHTML={{ __html: user.name }} />
      <p dangerouslySetInnerHTML={{ __html: user.bio }} />
    </div>
  );
};
```

## üß™ Testing

### Component Testing

```typescript
// Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

type Props = {
  children: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
};

describe('Button', () => {
  it('renders with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);

    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('is disabled when disabled prop is true', () => {
    render(<Button disabled>Click me</Button>);
    expect(screen.getByText('Click me')).toBeDisabled();
  });
});
```

### API Testing

```typescript
// api/users.test.ts
import { userApi } from './users';
import { supabase } from '@/lib/supabase';

jest.mock('@/lib/supabase');

describe('userApi', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('fetches users successfully', async () => {
    const mockUsers = [{ id: '1', name: 'John', email: 'john@example.com' }];

    (supabase.from as jest.Mock).mockReturnValue({
      select: jest.fn().mockResolvedValue({
        data: mockUsers,
        error: null,
      }),
    });

    const result = await userApi.getUsers();
    expect(result).toEqual(mockUsers);
  });

  it('throws error when API call fails', async () => {
    (supabase.from as jest.Mock).mockReturnValue({
      select: jest.fn().mockResolvedValue({
        data: null,
        error: { message: 'Database error' },
      }),
    });

    await expect(userApi.getUsers()).rejects.toThrow('Database error');
  });
});
```

## üìö Documentation

### JSDoc Comments

````typescript
/**
 * Function to get user information
 * @param id - User ID
 * @returns User information or null
 * @throws {Error} When user is not found
 * @example
 * ```typescript
 * const user = await getUserById('123');
 * if (user) {
 *   console.log(user.name);
 * }
 * ```
 */
export const getUserById = async (id: string): Promise<User | null> => {
  // implementation
};
````

### README Writing Guide

````markdown
# Component Name

## Overview

Brief description of the component's purpose and functionality

## Props

| Prop     | Type                     | Default   | Description    |
| -------- | ------------------------ | --------- | -------------- |
| children | ReactNode                | -         | Child elements |
| variant  | 'primary' \| 'secondary' | 'primary' | Button style   |

## Usage Example

```tsx
import { Button } from '@/components/ui/Button';

<Button variant='primary' onClick={handleClick}>
  Click me
</Button>;
```
````

## Notes

- Special usage considerations
- Limitations

```

## üìã Checklist

### Before Development
- [ ] Requirements analysis completed
- [ ] Technology stack decided
- [ ] Project structure designed
- [ ] Development environment set up

### During Development
- [ ] Code style guide compliance
- [ ] Type safety ensured
- [ ] Error handling implemented
- [ ] Performance optimization considered
- [ ] Security review completed

### After Development
- [ ] Code review completed
- [ ] Tests written and passed
- [ ] Documentation updated
- [ ] Deployment ready

---

This document is continuously updated. Modify according to your team's requirements.
description:
globs:
alwaysApply: false
---
```
